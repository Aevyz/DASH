#include "dashsai.h"

#include <cstdlib>

using namespace dash;

#define DASH_BMV2_CPU_QOS_NUMBER_OF_QUEUES 0

#define DASH_OBJECT_SHFT 48
#define DASH_MAKE_OID(_objtype, _objval) (sai_object_id_t)(((sai_object_id_t)_objtype<<DASH_OBJECT_SHFT)+(sai_object_id_t)_objval)

#define DASH_CHECK_API_INITIALIZED()                                        \
    if (!m_apiInitialized) {                                                \
        DASH_LOG_ERROR("%s: api not initialized", __PRETTY_FUNCTION__);     \
        return SAI_STATUS_FAILURE; }

/**
 * @def DASH_USE_NOT_SUPPORTED
 *
 * Name of environment variable, when set to any value, will return proper
 * SAI_STATUS_NOT_SUPPORTED on switch/port GET api.
 *
 * Currently because of limitation of saithrift, GET on switch/port is
 * returning SAI_STATUS_SUCCESS on not implemented attribute.
 *
 * TODO FIXME needs to be addressed in saithrift.
 *
 * This is temporary workaround for syncd, it should be removed when fixed in saithrift.
 */
#define DASH_USE_NOT_SUPPORTED "DASH_USE_NOT_SUPPORTED"

#define MUTEX std::lock_guard<std::mutex> _lock(m_tableLock);

DashSai::DashSai():
    m_apiInitialized(false)
{
    DASH_LOG_ENTER();

    // those oids are constant

    m_switchId = DASH_MAKE_OID(SAI_OBJECT_TYPE_SWITCH, 1);
    m_defaultCpuPortId = DASH_MAKE_OID(SAI_OBJECT_TYPE_PORT, 64);
    m_defaultVlanId = DASH_MAKE_OID(SAI_OBJECT_TYPE_VLAN, 1);
    m_defaultVrfId = DASH_MAKE_OID(SAI_OBJECT_TYPE_VIRTUAL_ROUTER, 1);
    m_default1QBridgeId = DASH_MAKE_OID(SAI_OBJECT_TYPE_BRIDGE, 1);
}

DashSai::~DashSai()
{
    DASH_LOG_ENTER();

    if (m_apiInitialized)
    {
        apiUninitialize();
    }
}

sai_status_t DashSai::apiInitialize(
        _In_ uint64_t flags,
        _In_ const sai_service_method_table_t *services)
{
    DASH_LOG_ENTER();

    if (m_apiInitialized)
    {
        DASH_LOG_ERROR("api already initialized");

        return SAI_STATUS_FAILURE;
    }

    m_serviceMethodTable = services;

    m_cfg = dash::Config::getConfig(services);

    DASH_LOG_NOTICE("config: %s", m_cfg->getConfigString().c_str());

    for (uint32_t i = 1; i <= m_cfg->m_bmv2NumPorts; i++)
    {
        m_portList.push_back(DASH_MAKE_OID(SAI_OBJECT_TYPE_PORT,i));
    }

    assert(m_cfg->m_bmv2NumPorts == (uint32_t)m_portList.size());

    const grpc::string _grpcTarget = m_cfg->m_grpcTarget;
    const char* test_json = m_cfg->m_pipelineJson.c_str();
    const char* test_proto_json = m_cfg->m_pipelineProto.c_str();

    DASH_LOG_NOTICE("GRPC call SetForwardingPipelineConfig %s => %s, %s", _grpcTarget.c_str(), test_json, test_proto_json);

    auto p4info = parse_p4info(test_proto_json);

    auto set_election_id = [](p4::v1::Uint128 *election_id)
    {
        election_id->set_high(0);
        election_id->set_low(1);
    };

    grpc::ClientContext stream_context;

    m_grpcChannel = grpc::CreateChannel(_grpcTarget, grpc::InsecureChannelCredentials());

    m_stub = p4::v1::P4Runtime::NewStub(m_grpcChannel);

    auto stream = m_stub->StreamChannel(&stream_context);

    {
        p4::v1::StreamMessageRequest request;
        auto arbitration = request.mutable_arbitration();
        arbitration->set_device_id(m_cfg->m_deviceId);
        set_election_id(arbitration->mutable_election_id());
        stream->Write(request);
        p4::v1::StreamMessageResponse response;
        stream->Read(&response);
        assert(response.update_case() == p4::v1::StreamMessageResponse::kArbitration);
        assert(response.arbitration().status().code() == ::google::rpc::Code::OK);
    }

    {
        p4::v1::SetForwardingPipelineConfigRequest request;
        request.set_device_id(m_cfg->m_deviceId);
        request.set_action(
                p4::v1::SetForwardingPipelineConfigRequest_Action_VERIFY_AND_COMMIT);
        set_election_id(request.mutable_election_id());
        auto config = request.mutable_config();
        config->set_allocated_p4info(&p4info);
        std::ifstream istream(test_json);
        config->mutable_p4_device_config()->assign(
                (std::istreambuf_iterator<char>(istream)),
                 std::istreambuf_iterator<char>());

        p4::v1::SetForwardingPipelineConfigResponse rep;
        grpc::ClientContext context;

        auto status = m_stub->SetForwardingPipelineConfig(&context, request, &rep);

        assert(status.ok());

        config->release_p4info();
    }

    m_apiInitialized = true;

    return SAI_STATUS_SUCCESS;
}

sai_status_t DashSai::apiUninitialize(void)
{
    DASH_LOG_ENTER();
    DASH_CHECK_API_INITIALIZED();

    m_cfg = nullptr;

    m_portList.clear();

    m_tableEntryMap.clear();

    m_nextId = 0;

    m_grpcChannel = nullptr;

    m_stub = nullptr;

    m_apiInitialized = false;

    m_serviceMethodTable = nullptr;

    return SAI_STATUS_SUCCESS;
}

sai_object_type_t DashSai::objectTypeQuery(
        _In_ sai_object_id_t object_id)
{
    DASH_LOG_ENTER();

    if (!m_apiInitialized)
    {
        DASH_LOG_ERROR("api not initialized");

        return SAI_OBJECT_TYPE_NULL;

    }

    return sai_object_type_t(object_id >> (DASH_OBJECT_SHFT));
}

sai_object_id_t DashSai::switchIdQuery(
        _In_ sai_object_id_t object_id)
{
    DASH_LOG_ENTER();
    DASH_CHECK_API_INITIALIZED();

    if (object_id == SAI_NULL_OBJECT_ID)
    {
        return SAI_NULL_OBJECT_ID;
    }

    return m_switchId;
}

sai_status_t DashSai::createSwitch(
        _Out_ sai_object_id_t *switch_id,
        _In_ uint32_t attr_count,
        _In_ const sai_attribute_t *attr_list)
{
    DASH_LOG_ENTER();
    DASH_CHECK_API_INITIALIZED();

    *switch_id = m_switchId;

    DASH_LOG_NOTICE("created switch id: %ld", *switch_id);

    return SAI_STATUS_SUCCESS;
}

sai_status_t DashSai::getSwitchAttribute(
        _In_ sai_object_id_t switch_id,
        _In_ uint32_t attr_count,
        _Inout_ sai_attribute_t *attr_list)
{
    DASH_LOG_ENTER();
    DASH_CHECK_API_INITIALIZED();

    sai_attribute_t *attr = attr_list;

    for (uint32_t i = 0; i < attr_count ; i++, attr++)
    {
        switch(attr->id)
        {
            case SAI_SWITCH_ATTR_NUMBER_OF_ACTIVE_PORTS:

                attr->value.u32 = m_cfg->m_bmv2NumPorts;

                DASH_LOG_NOTICE("[%d] SAI_SWITCH_ATTR_NUMBER_OF_ACTIVE_PORTS = %d", i, attr->value.u32);

                break;

            case SAI_SWITCH_ATTR_PORT_LIST:

                attr->value.objlist.count = m_cfg->m_bmv2NumPorts;

                for (size_t j = 0; j < m_cfg->m_bmv2NumPorts; j++)
                {
                    attr->value.objlist.list[j] = m_portList.at(j);
                }

                DASH_LOG_NOTICE("[%d] SAI_SWITCH_ATTR_PORT_LIST = [%d objids]", i, m_cfg->m_bmv2NumPorts);

                break;

            case SAI_SWITCH_ATTR_DEFAULT_VLAN_ID:

                attr->value.oid = m_defaultVlanId;

                DASH_LOG_NOTICE("[%d] SAI_SWITCH_ATTR_DEFAULT_VLAN_ID = %lx", i, attr->value.oid);

                break;

            case SAI_SWITCH_ATTR_DEFAULT_VIRTUAL_ROUTER_ID:

                attr->value.oid = m_defaultVrfId;

                DASH_LOG_NOTICE("[%d] SAI_SWITCH_ATTR_DEFAULT_VIRTUAL_ROUTER_ID = %lx", i, attr->value.oid);

                break;

            case SAI_SWITCH_ATTR_DEFAULT_1Q_BRIDGE_ID:

                attr->value.oid = m_default1QBridgeId;

                DASH_LOG_NOTICE("[%d] SAI_SWITCH_ATTR_DEFAULT_1Q_BRIDGE_ID = %lx", i, attr->value.oid);

                break;

            case SAI_SWITCH_ATTR_CPU_PORT:

                attr->value.oid = m_defaultCpuPortId;

                DASH_LOG_NOTICE("[%d] SAI_SWITCH_ATTR_CPU_PORT = %lx", i, attr->value.oid);

                break;

            default:

                if (getenv(DASH_USE_NOT_SUPPORTED))
                {
                    DASH_LOG_WARN("[%d] attr %d is NOT SUPPORTED", i, attr->id);

                    return SAI_STATUS_NOT_SUPPORTED;
                }

                DASH_LOG_WARN("[%d] attr %d is NOT SUPPORTED, but returning SAI_STATUS_SUCCESS", i, attr->id);

                memset(&attr->value, 0, sizeof(attr->value)); // clear potential caller garbage

                break; // TODO FIXME should return NOT SUPPORTED
        }
    }

    return SAI_STATUS_SUCCESS;
}

sai_status_t DashSai::getPortAttribute(
        _In_ sai_object_id_t port_id,
        _In_ uint32_t attr_count,
        _Inout_ sai_attribute_t *attr_list)
{
    DASH_LOG_ENTER();
    DASH_CHECK_API_INITIALIZED();

    sai_attribute_t *attr = attr_list;

    for (uint32_t i = 0; i < attr_count ; i++, attr++)
    {
        switch(attr->id)
        {
            case SAI_PORT_ATTR_QOS_NUMBER_OF_QUEUES:

                attr->value.u32 = DASH_BMV2_CPU_QOS_NUMBER_OF_QUEUES;

                DASH_LOG_NOTICE("[%d] SAI_PORT_ATTR_QOS_NUMBER_OF_QUEUES = %d", i, attr->value.u32);

                break;

            default:

                if (getenv(DASH_USE_NOT_SUPPORTED))
                {
                    DASH_LOG_WARN("[%d] attr %d is NOT SUPPORTED", i, attr->id);

                    return SAI_STATUS_NOT_SUPPORTED;
                }

                DASH_LOG_WARN("[%d] attr %d is NOT SUPPORTED, but returning SAI_STATUS_SUCCESS", i, attr->id);

                memset(&attr->value, 0, sizeof(attr->value)); // clear potential caller garbage

                break; // TODO FIXME should return NOT SUPPORTED
        }
    }

    return SAI_STATUS_SUCCESS;
}

// private helper methods

p4::config::v1::P4Info DashSai::parse_p4info(
        _In_ const char *path)
{
    DASH_LOG_ENTER();

    p4::config::v1::P4Info p4info;
    std::ifstream istream(path);
    assert(istream.good());
    google::protobuf::io::IstreamInputStream istream_(&istream);
    google::protobuf::TextFormat::Parse(&istream_, &p4info);

    return p4info;
}

std::string DashSai::updateTypeStr(
        _In_ p4::v1::Update_Type updateType)
{
    DASH_LOG_ENTER();

    const google::protobuf::EnumDescriptor *descriptor = p4::v1::Update_Type_descriptor();

    return descriptor->FindValueByNumber(updateType)->name();
}

// helper methods

grpc::StatusCode DashSai::mutateTableEntry(
        _In_ std::shared_ptr<p4::v1::TableEntry> entry,
        _In_ p4::v1::Update_Type updateType)
{
    DASH_LOG_ENTER();

    if (!m_apiInitialized)
    {
        DASH_LOG_ERROR("api not initialized");

        return grpc::StatusCode::CANCELLED;
    }

    p4::v1::WriteRequest request;

    request.set_device_id(m_cfg->m_deviceId);

    auto update = request.add_updates();

    update->set_type(updateType);

    auto entity = update->mutable_entity();

    entity->set_allocated_table_entry(entry.get());

    p4::v1::WriteResponse rep;

    grpc::ClientContext context;

    grpc::Status status = m_stub->Write(&context, request, &rep);

    if (status.ok())
    {
        DASH_LOG_NOTICE("GRPC call Write::%s OK %s", updateTypeStr(updateType).c_str(), entry->ShortDebugString().c_str());
    }
    else
    {
        DASH_LOG_ERROR("GRPC ERROR[%d]: %s, %s", status.error_code(), status.error_message().c_str(), status.error_details().c_str());
        DASH_LOG_ERROR("GRPC call Write::%s ERROR: %s", updateTypeStr(updateType).c_str(), entry->ShortDebugString().c_str());
    }

    //MILIND?? What is this? reference release? memory release?
    entity->release_table_entry();

    return status.error_code();
}

bool DashSai::insertInTable(
        _In_ std::shared_ptr<p4::v1::TableEntry> entry,
        _In_ sai_object_type_t objectType,
        _Out_ sai_object_id_t *objId)
{
    DASH_LOG_ENTER();

    if (!m_apiInitialized)
    {
        DASH_LOG_ERROR("api not initialized");

        return false;
    }

    auto retCode = mutateTableEntry(entry, p4::v1::Update_Type_INSERT);

    if (grpc::StatusCode::OK != retCode)
    {
        return false;
    }

    MUTEX;

    if (*objId == 0)
    {
        *objId = getNextObjectId(objectType);
    }

    m_tableEntryMap.insert(std::make_pair(*objId, entry));

    return true;
}

sai_object_id_t DashSai::getNextObjectId(
        _In_ sai_object_type_t objectType)
{
    DASH_LOG_ENTER();

    if (!m_apiInitialized)
    {
        DASH_LOG_ERROR("api not initialized");

        return SAI_NULL_OBJECT_ID;
    }

    return DASH_MAKE_OID(objectType, ++m_nextId);
}

bool DashSai::removeFromTable(
        _In_ sai_object_id_t id)
{
    DASH_LOG_ENTER();

    if (!m_apiInitialized)
    {
        DASH_LOG_ERROR("api not initialized");

        return false;
    }

    MUTEX;

    auto range = m_tableEntryMap.equal_range(id);

    if (range.first == range.second)
    {
        DASH_LOG_ERROR("id: %ld not present in the table for deletion!", id);

        return false;
    }

    grpc::StatusCode retCode = grpc::StatusCode::OK;

    for (auto itr = range.first; itr != range.second; ++itr)
    {
        auto entry = itr->second;
        auto tempRet = mutateTableEntry(entry, p4::v1::Update_Type_DELETE);

        if (grpc::StatusCode::OK != tempRet)
        {
            retCode = tempRet;
        }
    }

    m_tableEntryMap.erase(id);

    return retCode == grpc::StatusCode::OK;
}
